#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct stack{
    int top;
    int maxsize;
    int* arr;
};

struct stack* create(int max){
    struct stack* st = (struct stack*)malloc(sizeof(struct stack));
    st->maxsize = max;
    st->top = -1;
    st->arr = (int*)malloc(st->maxsize*sizeof(int));
    return st;
}

int isEmpty(struct stack* st){
    return st->top == -1;
}

int isFull(struct stack* st)
{
    if(st->top == st->maxsize - 1){
        printf("Stack underflow\n");
        return -1;
    }

    else{
    return st->top == st->maxsize - 1;
    }
}

void push(struct stack* st, int val){
    if(isFull(st)){
        return;
    }

    else{
        st->arr[++st->top] = val;
    }
}

int pop(struct stack* st){
    if(isEmpty(st)){
        printf("Stack underflow\n");
        return -1;
    }

    else{
    return st->arr[st->top--];
    }
}

int peek(struct stack* st){
    if(isEmpty(st)){
        printf("Stack underflow\n");
        return -1;
    }
     else{
         return st->arr[st->top];
         }
}

int isOperand(char ch){
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

int prec(char ch){

    if(ch == '+' || ch == '-'){
        return 1;
    }
    else if(ch == '*' || ch == '/'){
        return 2;
    }
    else if(ch == '^'){
        return 3;
    }
    else{
        return -1;
    }
}

void infixToPostfix(char* inf)
{
    int i, j=0;

    struct stack* st = create(strlen(inf));

    for(i = 0; inf[i]; i++){

          if(isOperand(inf[i])){
              inf[j++] = inf[i];
          }

          else if(inf[i] == '('){
              push(st, inf[i]);
          }

          else if(inf[i] == ')'){
              while(!isEmpty(st) && peek(st) != '('){
                    inf[j++] = pop(st);
              }

              if(!isEmpty(st) && peek(st) != '('){
                  return;
              }

              else{
                pop(st);
              }
          }

        else{
            while(!isEmpty(st) && prec(inf[i]) <= prec(peek(st))){
                inf[j++] = pop(st);
            }
            push(st, inf[i]);
        }
    }

    while (!isEmpty(st)){
        inf[j++] = pop(st);
    }

    inf[j++] = '\0';
    printf("\n");
    printf("Postfix expression is:\n");
    printf( "%s", inf);
    printf("\n");
}

int main()
{
    char inf[100];
    printf("Enter the infix expression\n");
    scanf("%s",inf);
    infixToPostfix(inf);
    return 0;
}
